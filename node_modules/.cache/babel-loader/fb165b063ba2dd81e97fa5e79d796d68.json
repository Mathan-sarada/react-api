{"ast":null,"code":"var _jsxFileName = \"/home/selvi/Desktop/My App Pro/vehicle-app/src/views/Service.js\";\nimport React from \"react\";\nimport CommonTable from \"../components/common/CommonTable\";\nimport { Service_Api } from \"../api/service_api\";\nimport AddServiceDialog from \"../components/forms/addService\";\nimport BPNotification from \"../components/common/BPNotification\";\nconst HeaderValue = [\"Service Name\", \"Category\", \"Vehicle CC\", \"Description\", \"Price\", \"Actions\"];\n\nconst Service = () => {\n  const [data, setData] = React.useState([]);\n  const [modalOpen, setmodalOpen] = React.useState(false);\n  const [successModal, setSuccessModal] = React.useState(false);\n  const [message, setMessage] = React.useState(false);\n  const [row, setRow] = React.useState(false);\n\n  const addService = () => {\n    setRow(false);\n    setmodalOpen(!modalOpen);\n  };\n\n  const closeModal = () => {\n    setmodalOpen(!modalOpen);\n  };\n\n  const getData = async () => {\n    const res = await Service_Api.Get_Service();\n\n    if (res.code == 200) {\n      setData(res.data.message);\n    } else {\n      return [];\n    }\n  };\n\n  const submit = async fields => {\n    const res = await Vendor_Api.Add_Vendor(fields);\n\n    if (res.code == 200) {\n      setmodalOpen(false);\n      setSuccessModal(true);\n      setTimeout(() => {\n        setSuccessModal(false);\n      }, 3000);\n      setMessage(res.data.message);\n      getData();\n    }\n  };\n\n  const Update_Vendor = async (fields, id) => {\n    const row1 = data.filter(x => x._id == id)[0];\n    let data1 = {};\n\n    if (row1.vendor_name !== fields.data.vendor_name) {\n      data1 = Object.assign(data1, {\n        vendor_name: fields.data.vendor_name\n      });\n    }\n\n    if (row1.email !== fields.data.email) {\n      data1 = Object.assign(data1, {\n        email: fields.data.email\n      });\n    }\n\n    if (row1.mobile !== fields.data.mobile) {\n      data1 = Object.assign(data1, {\n        mobile: fields.data.mobile\n      });\n    }\n\n    if (row1.location !== fields.data.location) {\n      data1 = Object.assign(data1, {\n        location: fields.data.location\n      });\n    }\n\n    const obj = {\n      data: data1\n    };\n    const res = await Service_Api.Update_Service(row1._id, obj);\n\n    if (res.code == 200) {\n      setmodalOpen(false);\n      setSuccessModal(true);\n      setTimeout(() => {\n        setSuccessModal(false);\n      }, 3000);\n      setMessage(res.data.message);\n      getData();\n    } else {\n      setMessage(res.data.error.message);\n    }\n  };\n\n  React.useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CommonTable, {\n    data: data,\n    Header: HeaderValue,\n    buttonLabel: \"Add Service\",\n    onClick: res => addService(res),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), modalOpen && /*#__PURE__*/React.createElement(AddServiceDialog, {\n    closeModal: closeModal,\n    fields: row,\n    update: (updated, id) => Update_Vendor(updated, id),\n    submit: fields => submit(fields),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), successModal && /*#__PURE__*/React.createElement(BPNotification, {\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 24\n    }\n  }));\n};\n\nexport default Service;","map":{"version":3,"sources":["/home/selvi/Desktop/My App Pro/vehicle-app/src/views/Service.js"],"names":["React","CommonTable","Service_Api","AddServiceDialog","BPNotification","HeaderValue","Service","data","setData","useState","modalOpen","setmodalOpen","successModal","setSuccessModal","message","setMessage","row","setRow","addService","closeModal","getData","res","Get_Service","code","submit","fields","Vendor_Api","Add_Vendor","setTimeout","Update_Vendor","id","row1","filter","x","_id","data1","vendor_name","Object","assign","email","mobile","location","obj","Update_Service","error","useEffect","updated"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport CommonTable from \"../components/common/CommonTable\";\nimport { Service_Api } from \"../api/service_api\";\nimport AddServiceDialog from \"../components/forms/addService\";\nimport BPNotification from \"../components/common/BPNotification\";\n\nconst HeaderValue = [\n  \"Service Name\",\n  \"Category\",\n  \"Vehicle CC\",\n  \"Description\",\n  \"Price\",\n  \"Actions\"\n];\n\nconst Service = () => {\n  const [data, setData] = React.useState([]);\n  const [modalOpen, setmodalOpen] = React.useState(false);\n  const [successModal, setSuccessModal] = React.useState(false);\n  const [message, setMessage] = React.useState(false);\n  const [row, setRow] = React.useState(false);\n\n  const addService = () => {\n    setRow(false);\n    setmodalOpen(!modalOpen);\n  };\n\n  const closeModal = () => {\n    setmodalOpen(!modalOpen);\n  };\n\n  const getData = async () => {\n    const res = await Service_Api.Get_Service();\n    if (res.code == 200) {\n      setData(res.data.message);\n    } else {\n      return [];\n    }\n  };\n\n  const submit = async fields => {\n    const res = await Vendor_Api.Add_Vendor(fields);\n    if (res.code == 200) {\n      setmodalOpen(false);\n      setSuccessModal(true);\n      setTimeout(() => {\n        setSuccessModal(false);\n      }, 3000);\n      setMessage(res.data.message);\n      getData();\n    }\n  };\n\n  const Update_Vendor = async (fields, id) => {\n    const row1 = data.filter(x => x._id == id)[0];\n    let data1 = {};\n    if (row1.vendor_name !== fields.data.vendor_name) {\n      data1 = Object.assign(data1, { vendor_name: fields.data.vendor_name });\n    }\n    if (row1.email !== fields.data.email) {\n      data1 = Object.assign(data1, { email: fields.data.email });\n    }\n    if (row1.mobile !== fields.data.mobile) {\n      data1 = Object.assign(data1, { mobile: fields.data.mobile });\n    }\n    if (row1.location !== fields.data.location) {\n      data1 = Object.assign(data1, { location: fields.data.location });\n    }\n    const obj = {\n      data: data1\n    };\n    const res = await Service_Api.Update_Service(row1._id, obj);\n    if (res.code == 200) {\n      setmodalOpen(false);\n      setSuccessModal(true);\n      setTimeout(() => {\n        setSuccessModal(false);\n      }, 3000);\n      setMessage(res.data.message);\n      getData();\n    } else {\n      setMessage(res.data.error.message);\n    }\n  };\n\n  React.useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <React.Fragment>\n      <CommonTable\n        data={data}\n        Header={HeaderValue}\n        buttonLabel={\"Add Service\"}\n        onClick={res => addService(res)}\n      />\n      {modalOpen && (\n        <AddServiceDialog\n          closeModal={closeModal}\n          fields={row}\n          update={(updated, id) => Update_Vendor(updated, id)}\n          submit={fields => submit(fields)}\n        />\n      )}\n      {successModal && <BPNotification message={message} />}\n    </React.Fragment>\n  );\n};\n\nexport default Service;\n"]},"metadata":{},"sourceType":"module"}