{"ast":null,"code":"var _jsxFileName = \"/home/selvi/Desktop/My App Pro/vehicle-app/src/views/Vendor.js\";\nimport React from \"react\";\nimport CommonTable from \"../components/common/CommonTable\";\nimport AddVendorDialog from \"../components/forms/addVendor\";\nimport { Vendor_Api } from \"../api/vendor_api\";\nimport BPNotification from \"../components/common/BPNotification\";\nconst HeaderValue = [\"Vendor Name\", \"Mobile\", \"Email\", \"Location\", \"Action\"];\n\nconst Vendor = props => {\n  const [modalOpen, setmodalOpen] = React.useState(false);\n  const [successModal, setSuccessModal] = React.useState(false);\n  const [message, setMessage] = React.useState(false);\n  const [row, setRow] = React.useState(false);\n  const [data, setData] = React.useState([]);\n\n  const addVendor = () => {\n    setmodalOpen(!modalOpen);\n  };\n\n  const closeModal = () => {\n    setmodalOpen(!modalOpen);\n  };\n\n  const getData = async () => {\n    const res = await Vendor_Api.Get_Vendor();\n\n    if (res.code == 200) {\n      setData(res.data.message);\n    } else {\n      return [];\n    }\n  };\n\n  const submit = async fields => {\n    const res = await Vendor_Api.Add_Vendor(fields);\n\n    if (res.code == 200) {\n      setmodalOpen(false);\n      setSuccessModal(true);\n      setMessage(res.data.message);\n      getData();\n    }\n  };\n\n  const Update = row => {\n    setRow(row);\n    setmodalOpen(true);\n  };\n\n  const Update_Vendor = async (fields, id) => {\n    const row1 = data.filter(x => x._id == id)[0];\n    let data1 = {};\n\n    if (row1.vendor_name !== fields.data.vendor_name) {\n      data1 = Object.assign(data1, {\n        vendor_name: fields.data.vendor_name\n      });\n    }\n\n    if (row1.email !== fields.data.email) {\n      data1 = Object.assign(data1, {\n        email: fields.data.email\n      });\n    }\n\n    if (row1.mobile !== fields.data.mobile) {\n      data1 = Object.assign(data1, {\n        mobile: fields.data.mobile\n      });\n    }\n\n    if (row1.location !== fields.data.location) {\n      data1 = Object.assign(data1, {\n        location: fields.data.location\n      });\n    }\n\n    const obj = {\n      data: data1\n    };\n    const res = await Vendor_Api.Update_Vendor(row1._id, obj);\n\n    if (res.code == 200) {\n      setmodalOpen(false);\n      setSuccessModal(true);\n      setTimeout(() => {\n        setSuccessModal(false);\n      }, 3000);\n      setMessage(res.data.message);\n      getData();\n    } else {\n      setMessage(res.data.error.message);\n    }\n  };\n\n  React.useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CommonTable, {\n    Header: HeaderValue,\n    data: data,\n    buttonLabel: \"Add Vendor\",\n    Update: row => Update(row),\n    onClick: res => addVendor(res),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), modalOpen && /*#__PURE__*/React.createElement(AddVendorDialog, {\n    closeModal: closeModal,\n    fields: row,\n    update: (updated, id) => Update_Vendor(updated, id),\n    submit: fields => submit(fields),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), successModal && /*#__PURE__*/React.createElement(BPNotification, {\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 24\n    }\n  }));\n};\n\nexport default Vendor;","map":{"version":3,"sources":["/home/selvi/Desktop/My App Pro/vehicle-app/src/views/Vendor.js"],"names":["React","CommonTable","AddVendorDialog","Vendor_Api","BPNotification","HeaderValue","Vendor","props","modalOpen","setmodalOpen","useState","successModal","setSuccessModal","message","setMessage","row","setRow","data","setData","addVendor","closeModal","getData","res","Get_Vendor","code","submit","fields","Add_Vendor","Update","Update_Vendor","id","row1","filter","x","_id","data1","vendor_name","Object","assign","email","mobile","location","obj","setTimeout","error","useEffect","updated"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport CommonTable from \"../components/common/CommonTable\";\nimport AddVendorDialog from \"../components/forms/addVendor\";\nimport { Vendor_Api } from \"../api/vendor_api\";\nimport BPNotification from \"../components/common/BPNotification\";\n\nconst HeaderValue = [\"Vendor Name\", \"Mobile\", \"Email\", \"Location\", \"Action\"];\n\nconst Vendor = props => {\n  const [modalOpen, setmodalOpen] = React.useState(false);\n  const [successModal, setSuccessModal] = React.useState(false);\n  const [message, setMessage] = React.useState(false);\n  const [row, setRow] = React.useState(false);\n  const [data, setData] = React.useState([]);\n\n  const addVendor = () => {\n    setmodalOpen(!modalOpen);\n  };\n\n  const closeModal = () => {\n    setmodalOpen(!modalOpen);\n  };\n\n  const getData = async () => {\n    const res = await Vendor_Api.Get_Vendor();\n    if (res.code == 200) {\n      setData(res.data.message);\n    } else {\n      return [];\n    }\n  };\n\n  const submit = async fields => {\n    const res = await Vendor_Api.Add_Vendor(fields);\n    if (res.code == 200) {\n      setmodalOpen(false);\n      setSuccessModal(true);\n      setMessage(res.data.message);\n      getData();\n    }\n  };\n\n  const Update = row => {\n    setRow(row);\n    setmodalOpen(true);\n  };\n\n  const Update_Vendor = async (fields, id) => {\n    const row1 = data.filter(x => x._id == id)[0];\n    let data1 = {};\n    if (row1.vendor_name !== fields.data.vendor_name) {\n      data1 = Object.assign(data1, { vendor_name: fields.data.vendor_name });\n    }\n    if (row1.email !== fields.data.email) {\n      data1 = Object.assign(data1, { email: fields.data.email });\n    }\n    if (row1.mobile !== fields.data.mobile) {\n      data1 = Object.assign(data1, { mobile: fields.data.mobile });\n    }\n    if (row1.location !== fields.data.location) {\n      data1 = Object.assign(data1, { location: fields.data.location });\n    }\n    const obj = {\n      data: data1\n    };\n    const res = await Vendor_Api.Update_Vendor(row1._id, obj);\n    if (res.code == 200) {\n      setmodalOpen(false);\n      setSuccessModal(true);\n      setTimeout(() => {\n        setSuccessModal(false);\n      }, 3000);\n      setMessage(res.data.message);\n      getData();\n    } else {\n      setMessage(res.data.error.message);\n    }\n  };\n\n  React.useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <React.Fragment>\n      <CommonTable\n        Header={HeaderValue}\n        data={data}\n        buttonLabel={\"Add Vendor\"}\n        Update={row => Update(row)}\n        onClick={res => addVendor(res)}\n      />\n      {modalOpen && (\n        <AddVendorDialog\n          closeModal={closeModal}\n          fields={row}\n          update={(updated, id) => Update_Vendor(updated, id)}\n          submit={fields => submit(fields)}\n        />\n      )}\n      {successModal && <BPNotification message={message} />}\n    </React.Fragment>\n  );\n};\n\nexport default Vendor;\n"]},"metadata":{},"sourceType":"module"}